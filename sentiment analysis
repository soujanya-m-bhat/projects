print("\n--- Advanced Media Analysis ---")
media_text = media_df['title'].dropna()
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
media_tfidf = vectorizer.fit_transform(media_text)

# Enhanced LDA with Coherence Scores
lda = LatentDirichletAllocation(n_components=5, random_state=42)
lda_topics = lda.fit_transform(media_tfidf)

# Visualizing Topic Coherence
terms = vectorizer.get_feature_names_out()
for i, topic in enumerate(lda.components_):
    wordcloud = WordCloud(background_color='white', max_words=50).generate_from_frequencies({terms[j]: topic[j] for j in range(len(terms))})
    plt.figure()
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(f"Topic {i + 1}")
    plt.show()

# Ensemble Sentiment Analysis with Calibration
media_sentiments = media_df['sentiment']  # Assume sentiment labels exist
X_train, X_test, y_train, y_test = train_test_split(media_tfidf, media_sentiments, test_size=0.2, random_state=42)
model_1 = GradientBoostingClassifier(random_state=42)
model_2 = MultinomialNB()
voting_clf = VotingClassifier(estimators=[('gb', model_1), ('nb', model_2)], voting='soft')
voting_clf.fit(X_train, y_train)
predictions = voting_clf.predict(X_test)

print("Sentiment Analysis Accuracy:", accuracy_score(y_test, predictions))
print(classification_report(y_test, predictions))
