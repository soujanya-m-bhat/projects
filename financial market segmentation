import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA, LatentDirichletAllocation
from sklearn.ensemble import IsolationForest, GradientBoostingClassifier, VotingClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import silhouette_score, accuracy_score, classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
from wordcloud import WordCloud

# Load Datasets
finance_df = pd.read_csv("finance_dataset.csv")  # Update path accordingly
media_df = pd.read_csv("media_dataset.csv")
games_df = pd.read_csv("games_dataset.csv")

# --- Financial Market Segmentation with Anomaly Detection and Temporal Analysis ---
print("\n--- Advanced Financial Market Segmentation ---")
finance_df['Date'] = pd.to_datetime(finance_df['Date'])
finance_df['Year'] = finance_df['Date'].dt.year
finance_df['Month'] = finance_df['Date'].dt.month

# Temporal Analysis
monthly_trends = finance_df.groupby(['Year', 'Month'])['Close'].mean().reset_index()
plt.figure(figsize=(10, 6))
sns.lineplot(x='Month', y='Close', hue='Year', data=monthly_trends)
plt.title('Monthly Financial Trends')
plt.show()

# Feature Engineering and Scaling
finance_features = finance_df[['Open', 'High', 'Low', 'Volume']]
scaler = StandardScaler()
finance_features_scaled = scaler.fit_transform(finance_features)

# Dimensionality Reduction and Clustering
pca = PCA(n_components=3)
finance_pca = pca.fit_transform(finance_features_scaled)
kmeans = KMeans(n_clusters=5, random_state=42)
finance_clusters = kmeans.fit_predict(finance_pca)
finance_df['Cluster'] = finance_clusters

# Anomaly Detection
iso_forest = IsolationForest(random_state=42, contamination=0.03)
finance_df['Anomaly'] = iso_forest.fit_predict(finance_features_scaled)

# Visualization
fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(finance_pca[:, 0], finance_pca[:, 1], finance_pca[:, 2], c=finance_clusters, cmap='viridis', s=50)
ax.set_title('3D Financial Market Clusters')
plt.show()
